Terminals unused in grammar

    COMMENT_SINGLE
    DO
    BEGIN_FUNCTION
    NEW_LINE


State 26 conflicts: 1 shift/reduce
State 45 conflicts: 1 reduce/reduce


Grammar

    0 $accept: start $end

    1 start: fcodeseg

    2 fcodeseg: fcodeseg statement END_STATEMENT
    3         | fcodeseg loop
    4         | fcodeseg if_statement
    5         | fcodeseg Function
    6         | fcodeseg RETURN number END_STATEMENT
    7         | fcodeseg RETURN option operation option
    8         | fcodeseg RETURN IDENTIFIER
    9         | %empty

   10 codeseg: codeseg statement END_STATEMENT
   11        | codeseg loop
   12        | codeseg if_statement
   13        | codeseg Expression
   14        | codeseg Function_Call END_STATEMENT
   15        | %empty

   16 statement: array
   17          | INTEGER IDENTIFIER
   18          | IDENTIFIER EQUAL Expression
   19          | INTEGER IDENTIFIER EQUAL Expression
   20          | CONSOLE_OUT OUT_ARROW IDENTIFIER
   21          | CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK
   22          | CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK ZERO R_BRACK
   23          | CONSOLE_IN IN_ARROW IDENTIFIER
   24          | CONSOLE_IN IN_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK
   25          | IDENTIFIER EQUAL IDENTIFIER
   26          | RETURN Expression
   27          | STOP

   28 number: POS_NUM
   29       | NEG_NUM
   30       | ZERO

   31 array: INTEGER IDENTIFIER L_BRACK POS_NUM R_BRACK
   32      | INTEGER IDENTIFIER L_BRACK NEG_NUM R_BRACK
   33      | INTEGER IDENTIFIER L_BRACK ZERO R_BRACK
   34      | IDENTIFIER EQUAL IDENTIFIER L_BRACK IDENTIFIER R_BRACK
   35      | IDENTIFIER EQUAL IDENTIFIER L_BRACK POS_NUM R_BRACK
   36      | IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL choice
   37      | IDENTIFIER L_BRACK IDENTIFIER R_BRACK EQUAL choice
   38      | IDENTIFIER EQUAL IDENTIFIER L_BRACK ZERO R_BRACK
   39      | IDENTIFIER L_BRACK ZERO R_BRACK EQUAL choice

   40 Function: FUNC IDENTIFIER L_PAREN Parameter R_PAREN L_CURL codeseg R_CURL

   41 Parameter: Parameter COMMA INTEGER IDENTIFIER
   42          | INTEGER IDENTIFIER
   43          | IDENTIFIER
   44          | Parameter COMMA IDENTIFIER
   45          | %empty

   46 condition: choice condition_op choice

   47 choice: IDENTIFIER
   48       | POS_NUM
   49       | NEG_NUM
   50       | ZERO

   51 condition_op: LESS
   52             | GREATER
   53             | EQ
   54             | NOT_EQ
   55             | GREATER_EQ
   56             | LESS_EQ

   57 Expression: option operation option
   58           | IDENTIFIER
   59           | number
   60           | Function_Call

   61 option: IDENTIFIER
   62       | POS_NUM
   63       | Function_Call
   64       | NEG_NUM
   65       | ZERO

   66 operation: PLUS
   67          | MINUS
   68          | MULT
   69          | DIV
   70          | MOD

   71 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg R_CURL

   72 Function_Call: IDENTIFIER L_PAREN Parameter R_PAREN

   73 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL else

   74 else: ELSE L_CURL codeseg R_CURL
   75     | %empty


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER (258) 17 19 31 32 33 41 42
    IDENTIFIER <id> (259) 8 17 18 19 20 21 22 23 24 25 31 32 33 34 35 36 37 38 39 40 41 42 43 44 47 58 61 72
    END_STATEMENT (260) 2 6 10 14
    COMMENT_SINGLE (261)
    FUNC (262) 40
    RETURN <cn> (263) 6 7 8 26
    ZERO <num> (264) 22 30 33 38 39 50 65
    NEG_NUM <num> (265) 29 32 49 64
    POS_NUM <num> (266) 21 24 28 31 35 36 48 62
    MULT (267) 68
    DIV (268) 69
    PLUS (269) 66
    MINUS (270) 67
    LESS (271) 51
    EQ (272) 53
    GREATER (273) 52
    NOT_EQ (274) 54
    LESS_EQ (275) 56
    GREATER_EQ (276) 55
    MOD (277) 70
    L_PAREN (278) 40 72
    R_PAREN (279) 40 71 72 73
    L_BRACK (280) 21 22 24 31 32 33 34 35 36 37 38 39
    R_BRACK (281) 21 22 24 31 32 33 34 35 36 37 38 39
    L_CURL (282) 40 71 73 74
    R_CURL (283) 40 71 73 74
    EQUAL (284) 18 19 25 34 35 36 37 38 39
    IF (285) 73
    ELSE (286) 74
    COMMA (287) 41 44
    BEGIN_PHASE (288) 71
    DO (289)
    BEGIN_FUNCTION <id> (290)
    OUT_ARROW (291) 20 21 22
    IN_ARROW (292) 23 24
    STOP (293) 27
    CONSOLE_IN (294) 23 24
    CONSOLE_OUT (295) 20 21 22
    NEW_LINE (296)


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    start (43)
        on left: 1
        on right: 0
    fcodeseg <cn> (44)
        on left: 2 3 4 5 6 7 8 9
        on right: 1 2 3 4 5 6 7 8
    codeseg <cn> (45)
        on left: 10 11 12 13 14 15
        on right: 10 11 12 13 14 40 71 73 74
    statement <cn> (46)
        on left: 16 17 18 19 20 21 22 23 24 25 26 27
        on right: 2 10
    number <cn> (47)
        on left: 28 29 30
        on right: 6 59
    array <cn> (48)
        on left: 31 32 33 34 35 36 37 38 39
        on right: 16
    Function <cn> (49)
        on left: 40
        on right: 5
    Parameter <cn> (50)
        on left: 41 42 43 44 45
        on right: 40 41 44 72
    condition <cn> (51)
        on left: 46
        on right: 71 73
    choice <cn> (52)
        on left: 47 48 49 50
        on right: 36 37 39 46
    condition_op <cn> (53)
        on left: 51 52 53 54 55 56
        on right: 46
    Expression <cn> (54)
        on left: 57 58 59 60
        on right: 13 18 19 26
    option <cn> (55)
        on left: 61 62 63 64 65
        on right: 7 57
    operation <cn> (56)
        on left: 66 67 68 69 70
        on right: 7 57
    loop <cn> (57)
        on left: 71
        on right: 3 11
    Function_Call <cn> (58)
        on left: 72
        on right: 14 60 63
    if_statement <cn> (59)
        on left: 73
        on right: 4 12
    else <cn> (60)
        on left: 74 75
        on right: 73


State 0

    0 $accept: . start $end

    $default  reduce using rule 9 (fcodeseg)

    start     go to state 1
    fcodeseg  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: fcodeseg .
    2 fcodeseg: fcodeseg . statement END_STATEMENT
    3         | fcodeseg . loop
    4         | fcodeseg . if_statement
    5         | fcodeseg . Function
    6         | fcodeseg . RETURN number END_STATEMENT
    7         | fcodeseg . RETURN option operation option
    8         | fcodeseg . RETURN IDENTIFIER

    INTEGER      shift, and go to state 4
    IDENTIFIER   shift, and go to state 5
    FUNC         shift, and go to state 6
    RETURN       shift, and go to state 7
    IF           shift, and go to state 8
    BEGIN_PHASE  shift, and go to state 9
    STOP         shift, and go to state 10
    CONSOLE_IN   shift, and go to state 11
    CONSOLE_OUT  shift, and go to state 12

    $default  reduce using rule 1 (start)

    statement     go to state 13
    array         go to state 14
    Function      go to state 15
    loop          go to state 16
    if_statement  go to state 17


State 3

    0 $accept: start $end .

    $default  accept


State 4

   17 statement: INTEGER . IDENTIFIER
   19          | INTEGER . IDENTIFIER EQUAL Expression
   31 array: INTEGER . IDENTIFIER L_BRACK POS_NUM R_BRACK
   32      | INTEGER . IDENTIFIER L_BRACK NEG_NUM R_BRACK
   33      | INTEGER . IDENTIFIER L_BRACK ZERO R_BRACK

    IDENTIFIER  shift, and go to state 18


State 5

   18 statement: IDENTIFIER . EQUAL Expression
   25          | IDENTIFIER . EQUAL IDENTIFIER
   34 array: IDENTIFIER . EQUAL IDENTIFIER L_BRACK IDENTIFIER R_BRACK
   35      | IDENTIFIER . EQUAL IDENTIFIER L_BRACK POS_NUM R_BRACK
   36      | IDENTIFIER . L_BRACK POS_NUM R_BRACK EQUAL choice
   37      | IDENTIFIER . L_BRACK IDENTIFIER R_BRACK EQUAL choice
   38      | IDENTIFIER . EQUAL IDENTIFIER L_BRACK ZERO R_BRACK
   39      | IDENTIFIER . L_BRACK ZERO R_BRACK EQUAL choice

    L_BRACK  shift, and go to state 19
    EQUAL    shift, and go to state 20


State 6

   40 Function: FUNC . IDENTIFIER L_PAREN Parameter R_PAREN L_CURL codeseg R_CURL

    IDENTIFIER  shift, and go to state 21


State 7

    6 fcodeseg: fcodeseg RETURN . number END_STATEMENT
    7         | fcodeseg RETURN . option operation option
    8         | fcodeseg RETURN . IDENTIFIER
   26 statement: RETURN . Expression

    IDENTIFIER  shift, and go to state 22
    ZERO        shift, and go to state 23
    NEG_NUM     shift, and go to state 24
    POS_NUM     shift, and go to state 25

    number         go to state 26
    Expression     go to state 27
    option         go to state 28
    Function_Call  go to state 29


State 8

   73 if_statement: IF . condition R_PAREN L_CURL codeseg R_CURL else

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    condition  go to state 34
    choice     go to state 35


State 9

   71 loop: BEGIN_PHASE . condition R_PAREN L_CURL codeseg R_CURL

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    condition  go to state 36
    choice     go to state 35


State 10

   27 statement: STOP .

    $default  reduce using rule 27 (statement)


State 11

   23 statement: CONSOLE_IN . IN_ARROW IDENTIFIER
   24          | CONSOLE_IN . IN_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK

    IN_ARROW  shift, and go to state 37


State 12

   20 statement: CONSOLE_OUT . OUT_ARROW IDENTIFIER
   21          | CONSOLE_OUT . OUT_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK
   22          | CONSOLE_OUT . OUT_ARROW IDENTIFIER L_BRACK ZERO R_BRACK

    OUT_ARROW  shift, and go to state 38


State 13

    2 fcodeseg: fcodeseg statement . END_STATEMENT

    END_STATEMENT  shift, and go to state 39


State 14

   16 statement: array .

    $default  reduce using rule 16 (statement)


State 15

    5 fcodeseg: fcodeseg Function .

    $default  reduce using rule 5 (fcodeseg)


State 16

    3 fcodeseg: fcodeseg loop .

    $default  reduce using rule 3 (fcodeseg)


State 17

    4 fcodeseg: fcodeseg if_statement .

    $default  reduce using rule 4 (fcodeseg)


State 18

   17 statement: INTEGER IDENTIFIER .
   19          | INTEGER IDENTIFIER . EQUAL Expression
   31 array: INTEGER IDENTIFIER . L_BRACK POS_NUM R_BRACK
   32      | INTEGER IDENTIFIER . L_BRACK NEG_NUM R_BRACK
   33      | INTEGER IDENTIFIER . L_BRACK ZERO R_BRACK

    L_BRACK  shift, and go to state 40
    EQUAL    shift, and go to state 41

    $default  reduce using rule 17 (statement)


State 19

   36 array: IDENTIFIER L_BRACK . POS_NUM R_BRACK EQUAL choice
   37      | IDENTIFIER L_BRACK . IDENTIFIER R_BRACK EQUAL choice
   39      | IDENTIFIER L_BRACK . ZERO R_BRACK EQUAL choice

    IDENTIFIER  shift, and go to state 42
    ZERO        shift, and go to state 43
    POS_NUM     shift, and go to state 44


State 20

   18 statement: IDENTIFIER EQUAL . Expression
   25          | IDENTIFIER EQUAL . IDENTIFIER
   34 array: IDENTIFIER EQUAL . IDENTIFIER L_BRACK IDENTIFIER R_BRACK
   35      | IDENTIFIER EQUAL . IDENTIFIER L_BRACK POS_NUM R_BRACK
   38      | IDENTIFIER EQUAL . IDENTIFIER L_BRACK ZERO R_BRACK

    IDENTIFIER  shift, and go to state 45
    ZERO        shift, and go to state 23
    NEG_NUM     shift, and go to state 24
    POS_NUM     shift, and go to state 25

    number         go to state 46
    Expression     go to state 47
    option         go to state 48
    Function_Call  go to state 29


State 21

   40 Function: FUNC IDENTIFIER . L_PAREN Parameter R_PAREN L_CURL codeseg R_CURL

    L_PAREN  shift, and go to state 49


State 22

    8 fcodeseg: fcodeseg RETURN IDENTIFIER .
   58 Expression: IDENTIFIER .
   61 option: IDENTIFIER .
   72 Function_Call: IDENTIFIER . L_PAREN Parameter R_PAREN

    L_PAREN  shift, and go to state 50

    END_STATEMENT  reduce using rule 58 (Expression)
    MULT           reduce using rule 61 (option)
    DIV            reduce using rule 61 (option)
    PLUS           reduce using rule 61 (option)
    MINUS          reduce using rule 61 (option)
    MOD            reduce using rule 61 (option)
    $default       reduce using rule 8 (fcodeseg)


State 23

   30 number: ZERO .
   65 option: ZERO .

    MULT      reduce using rule 65 (option)
    DIV       reduce using rule 65 (option)
    PLUS      reduce using rule 65 (option)
    MINUS     reduce using rule 65 (option)
    MOD       reduce using rule 65 (option)
    $default  reduce using rule 30 (number)


State 24

   29 number: NEG_NUM .
   64 option: NEG_NUM .

    MULT      reduce using rule 64 (option)
    DIV       reduce using rule 64 (option)
    PLUS      reduce using rule 64 (option)
    MINUS     reduce using rule 64 (option)
    MOD       reduce using rule 64 (option)
    $default  reduce using rule 29 (number)


State 25

   28 number: POS_NUM .
   62 option: POS_NUM .

    MULT      reduce using rule 62 (option)
    DIV       reduce using rule 62 (option)
    PLUS      reduce using rule 62 (option)
    MINUS     reduce using rule 62 (option)
    MOD       reduce using rule 62 (option)
    $default  reduce using rule 28 (number)


State 26

    6 fcodeseg: fcodeseg RETURN number . END_STATEMENT
   59 Expression: number .

    END_STATEMENT  shift, and go to state 51

    END_STATEMENT  [reduce using rule 59 (Expression)]


State 27

   26 statement: RETURN Expression .

    $default  reduce using rule 26 (statement)


State 28

    7 fcodeseg: fcodeseg RETURN option . operation option
   57 Expression: option . operation option

    MULT   shift, and go to state 52
    DIV    shift, and go to state 53
    PLUS   shift, and go to state 54
    MINUS  shift, and go to state 55
    MOD    shift, and go to state 56

    operation  go to state 57


State 29

   60 Expression: Function_Call .
   63 option: Function_Call .

    END_STATEMENT  reduce using rule 60 (Expression)
    $default       reduce using rule 63 (option)


State 30

   47 choice: IDENTIFIER .

    $default  reduce using rule 47 (choice)


State 31

   50 choice: ZERO .

    $default  reduce using rule 50 (choice)


State 32

   49 choice: NEG_NUM .

    $default  reduce using rule 49 (choice)


State 33

   48 choice: POS_NUM .

    $default  reduce using rule 48 (choice)


State 34

   73 if_statement: IF condition . R_PAREN L_CURL codeseg R_CURL else

    R_PAREN  shift, and go to state 58


State 35

   46 condition: choice . condition_op choice

    LESS        shift, and go to state 59
    EQ          shift, and go to state 60
    GREATER     shift, and go to state 61
    NOT_EQ      shift, and go to state 62
    LESS_EQ     shift, and go to state 63
    GREATER_EQ  shift, and go to state 64

    condition_op  go to state 65


State 36

   71 loop: BEGIN_PHASE condition . R_PAREN L_CURL codeseg R_CURL

    R_PAREN  shift, and go to state 66


State 37

   23 statement: CONSOLE_IN IN_ARROW . IDENTIFIER
   24          | CONSOLE_IN IN_ARROW . IDENTIFIER L_BRACK POS_NUM R_BRACK

    IDENTIFIER  shift, and go to state 67


State 38

   20 statement: CONSOLE_OUT OUT_ARROW . IDENTIFIER
   21          | CONSOLE_OUT OUT_ARROW . IDENTIFIER L_BRACK POS_NUM R_BRACK
   22          | CONSOLE_OUT OUT_ARROW . IDENTIFIER L_BRACK ZERO R_BRACK

    IDENTIFIER  shift, and go to state 68


State 39

    2 fcodeseg: fcodeseg statement END_STATEMENT .

    $default  reduce using rule 2 (fcodeseg)


State 40

   31 array: INTEGER IDENTIFIER L_BRACK . POS_NUM R_BRACK
   32      | INTEGER IDENTIFIER L_BRACK . NEG_NUM R_BRACK
   33      | INTEGER IDENTIFIER L_BRACK . ZERO R_BRACK

    ZERO     shift, and go to state 69
    NEG_NUM  shift, and go to state 70
    POS_NUM  shift, and go to state 71


State 41

   19 statement: INTEGER IDENTIFIER EQUAL . Expression

    IDENTIFIER  shift, and go to state 72
    ZERO        shift, and go to state 23
    NEG_NUM     shift, and go to state 24
    POS_NUM     shift, and go to state 25

    number         go to state 46
    Expression     go to state 73
    option         go to state 48
    Function_Call  go to state 29


State 42

   37 array: IDENTIFIER L_BRACK IDENTIFIER . R_BRACK EQUAL choice

    R_BRACK  shift, and go to state 74


State 43

   39 array: IDENTIFIER L_BRACK ZERO . R_BRACK EQUAL choice

    R_BRACK  shift, and go to state 75


State 44

   36 array: IDENTIFIER L_BRACK POS_NUM . R_BRACK EQUAL choice

    R_BRACK  shift, and go to state 76


State 45

   25 statement: IDENTIFIER EQUAL IDENTIFIER .
   34 array: IDENTIFIER EQUAL IDENTIFIER . L_BRACK IDENTIFIER R_BRACK
   35      | IDENTIFIER EQUAL IDENTIFIER . L_BRACK POS_NUM R_BRACK
   38      | IDENTIFIER EQUAL IDENTIFIER . L_BRACK ZERO R_BRACK
   58 Expression: IDENTIFIER .
   61 option: IDENTIFIER .
   72 Function_Call: IDENTIFIER . L_PAREN Parameter R_PAREN

    L_PAREN  shift, and go to state 50
    L_BRACK  shift, and go to state 77

    END_STATEMENT  reduce using rule 25 (statement)
    END_STATEMENT  [reduce using rule 58 (Expression)]
    $default       reduce using rule 61 (option)


State 46

   59 Expression: number .

    $default  reduce using rule 59 (Expression)


State 47

   18 statement: IDENTIFIER EQUAL Expression .

    $default  reduce using rule 18 (statement)


State 48

   57 Expression: option . operation option

    MULT   shift, and go to state 52
    DIV    shift, and go to state 53
    PLUS   shift, and go to state 54
    MINUS  shift, and go to state 55
    MOD    shift, and go to state 56

    operation  go to state 78


State 49

   40 Function: FUNC IDENTIFIER L_PAREN . Parameter R_PAREN L_CURL codeseg R_CURL

    INTEGER     shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    $default  reduce using rule 45 (Parameter)

    Parameter  go to state 81


State 50

   72 Function_Call: IDENTIFIER L_PAREN . Parameter R_PAREN

    INTEGER     shift, and go to state 79
    IDENTIFIER  shift, and go to state 80

    $default  reduce using rule 45 (Parameter)

    Parameter  go to state 82


State 51

    6 fcodeseg: fcodeseg RETURN number END_STATEMENT .

    $default  reduce using rule 6 (fcodeseg)


State 52

   68 operation: MULT .

    $default  reduce using rule 68 (operation)


State 53

   69 operation: DIV .

    $default  reduce using rule 69 (operation)


State 54

   66 operation: PLUS .

    $default  reduce using rule 66 (operation)


State 55

   67 operation: MINUS .

    $default  reduce using rule 67 (operation)


State 56

   70 operation: MOD .

    $default  reduce using rule 70 (operation)


State 57

    7 fcodeseg: fcodeseg RETURN option operation . option
   57 Expression: option operation . option

    IDENTIFIER  shift, and go to state 83
    ZERO        shift, and go to state 84
    NEG_NUM     shift, and go to state 85
    POS_NUM     shift, and go to state 86

    option         go to state 87
    Function_Call  go to state 88


State 58

   73 if_statement: IF condition R_PAREN . L_CURL codeseg R_CURL else

    L_CURL  shift, and go to state 89


State 59

   51 condition_op: LESS .

    $default  reduce using rule 51 (condition_op)


State 60

   53 condition_op: EQ .

    $default  reduce using rule 53 (condition_op)


State 61

   52 condition_op: GREATER .

    $default  reduce using rule 52 (condition_op)


State 62

   54 condition_op: NOT_EQ .

    $default  reduce using rule 54 (condition_op)


State 63

   56 condition_op: LESS_EQ .

    $default  reduce using rule 56 (condition_op)


State 64

   55 condition_op: GREATER_EQ .

    $default  reduce using rule 55 (condition_op)


State 65

   46 condition: choice condition_op . choice

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    choice  go to state 90


State 66

   71 loop: BEGIN_PHASE condition R_PAREN . L_CURL codeseg R_CURL

    L_CURL  shift, and go to state 91


State 67

   23 statement: CONSOLE_IN IN_ARROW IDENTIFIER .
   24          | CONSOLE_IN IN_ARROW IDENTIFIER . L_BRACK POS_NUM R_BRACK

    L_BRACK  shift, and go to state 92

    $default  reduce using rule 23 (statement)


State 68

   20 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER .
   21          | CONSOLE_OUT OUT_ARROW IDENTIFIER . L_BRACK POS_NUM R_BRACK
   22          | CONSOLE_OUT OUT_ARROW IDENTIFIER . L_BRACK ZERO R_BRACK

    L_BRACK  shift, and go to state 93

    $default  reduce using rule 20 (statement)


State 69

   33 array: INTEGER IDENTIFIER L_BRACK ZERO . R_BRACK

    R_BRACK  shift, and go to state 94


State 70

   32 array: INTEGER IDENTIFIER L_BRACK NEG_NUM . R_BRACK

    R_BRACK  shift, and go to state 95


State 71

   31 array: INTEGER IDENTIFIER L_BRACK POS_NUM . R_BRACK

    R_BRACK  shift, and go to state 96


State 72

   58 Expression: IDENTIFIER .
   61 option: IDENTIFIER .
   72 Function_Call: IDENTIFIER . L_PAREN Parameter R_PAREN

    L_PAREN  shift, and go to state 50

    END_STATEMENT  reduce using rule 58 (Expression)
    $default       reduce using rule 61 (option)


State 73

   19 statement: INTEGER IDENTIFIER EQUAL Expression .

    $default  reduce using rule 19 (statement)


State 74

   37 array: IDENTIFIER L_BRACK IDENTIFIER R_BRACK . EQUAL choice

    EQUAL  shift, and go to state 97


State 75

   39 array: IDENTIFIER L_BRACK ZERO R_BRACK . EQUAL choice

    EQUAL  shift, and go to state 98


State 76

   36 array: IDENTIFIER L_BRACK POS_NUM R_BRACK . EQUAL choice

    EQUAL  shift, and go to state 99


State 77

   34 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK . IDENTIFIER R_BRACK
   35      | IDENTIFIER EQUAL IDENTIFIER L_BRACK . POS_NUM R_BRACK
   38      | IDENTIFIER EQUAL IDENTIFIER L_BRACK . ZERO R_BRACK

    IDENTIFIER  shift, and go to state 100
    ZERO        shift, and go to state 101
    POS_NUM     shift, and go to state 102


State 78

   57 Expression: option operation . option

    IDENTIFIER  shift, and go to state 83
    ZERO        shift, and go to state 84
    NEG_NUM     shift, and go to state 85
    POS_NUM     shift, and go to state 86

    option         go to state 103
    Function_Call  go to state 88


State 79

   42 Parameter: INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 104


State 80

   43 Parameter: IDENTIFIER .

    $default  reduce using rule 43 (Parameter)


State 81

   40 Function: FUNC IDENTIFIER L_PAREN Parameter . R_PAREN L_CURL codeseg R_CURL
   41 Parameter: Parameter . COMMA INTEGER IDENTIFIER
   44          | Parameter . COMMA IDENTIFIER

    R_PAREN  shift, and go to state 105
    COMMA    shift, and go to state 106


State 82

   41 Parameter: Parameter . COMMA INTEGER IDENTIFIER
   44          | Parameter . COMMA IDENTIFIER
   72 Function_Call: IDENTIFIER L_PAREN Parameter . R_PAREN

    R_PAREN  shift, and go to state 107
    COMMA    shift, and go to state 106


State 83

   61 option: IDENTIFIER .
   72 Function_Call: IDENTIFIER . L_PAREN Parameter R_PAREN

    L_PAREN  shift, and go to state 50

    $default  reduce using rule 61 (option)


State 84

   65 option: ZERO .

    $default  reduce using rule 65 (option)


State 85

   64 option: NEG_NUM .

    $default  reduce using rule 64 (option)


State 86

   62 option: POS_NUM .

    $default  reduce using rule 62 (option)


State 87

    7 fcodeseg: fcodeseg RETURN option operation option .
   57 Expression: option operation option .

    END_STATEMENT  reduce using rule 57 (Expression)
    $default       reduce using rule 7 (fcodeseg)


State 88

   63 option: Function_Call .

    $default  reduce using rule 63 (option)


State 89

   73 if_statement: IF condition R_PAREN L_CURL . codeseg R_CURL else

    $default  reduce using rule 15 (codeseg)

    codeseg  go to state 108


State 90

   46 condition: choice condition_op choice .

    $default  reduce using rule 46 (condition)


State 91

   71 loop: BEGIN_PHASE condition R_PAREN L_CURL . codeseg R_CURL

    $default  reduce using rule 15 (codeseg)

    codeseg  go to state 109


State 92

   24 statement: CONSOLE_IN IN_ARROW IDENTIFIER L_BRACK . POS_NUM R_BRACK

    POS_NUM  shift, and go to state 110


State 93

   21 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK . POS_NUM R_BRACK
   22          | CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK . ZERO R_BRACK

    ZERO     shift, and go to state 111
    POS_NUM  shift, and go to state 112


State 94

   33 array: INTEGER IDENTIFIER L_BRACK ZERO R_BRACK .

    $default  reduce using rule 33 (array)


State 95

   32 array: INTEGER IDENTIFIER L_BRACK NEG_NUM R_BRACK .

    $default  reduce using rule 32 (array)


State 96

   31 array: INTEGER IDENTIFIER L_BRACK POS_NUM R_BRACK .

    $default  reduce using rule 31 (array)


State 97

   37 array: IDENTIFIER L_BRACK IDENTIFIER R_BRACK EQUAL . choice

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    choice  go to state 113


State 98

   39 array: IDENTIFIER L_BRACK ZERO R_BRACK EQUAL . choice

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    choice  go to state 114


State 99

   36 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL . choice

    IDENTIFIER  shift, and go to state 30
    ZERO        shift, and go to state 31
    NEG_NUM     shift, and go to state 32
    POS_NUM     shift, and go to state 33

    choice  go to state 115


State 100

   34 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK IDENTIFIER . R_BRACK

    R_BRACK  shift, and go to state 116


State 101

   38 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK ZERO . R_BRACK

    R_BRACK  shift, and go to state 117


State 102

   35 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK POS_NUM . R_BRACK

    R_BRACK  shift, and go to state 118


State 103

   57 Expression: option operation option .

    $default  reduce using rule 57 (Expression)


State 104

   42 Parameter: INTEGER IDENTIFIER .

    $default  reduce using rule 42 (Parameter)


State 105

   40 Function: FUNC IDENTIFIER L_PAREN Parameter R_PAREN . L_CURL codeseg R_CURL

    L_CURL  shift, and go to state 119


State 106

   41 Parameter: Parameter COMMA . INTEGER IDENTIFIER
   44          | Parameter COMMA . IDENTIFIER

    INTEGER     shift, and go to state 120
    IDENTIFIER  shift, and go to state 121


State 107

   72 Function_Call: IDENTIFIER L_PAREN Parameter R_PAREN .

    $default  reduce using rule 72 (Function_Call)


State 108

   10 codeseg: codeseg . statement END_STATEMENT
   11        | codeseg . loop
   12        | codeseg . if_statement
   13        | codeseg . Expression
   14        | codeseg . Function_Call END_STATEMENT
   73 if_statement: IF condition R_PAREN L_CURL codeseg . R_CURL else

    INTEGER      shift, and go to state 4
    IDENTIFIER   shift, and go to state 122
    RETURN       shift, and go to state 123
    ZERO         shift, and go to state 23
    NEG_NUM      shift, and go to state 24
    POS_NUM      shift, and go to state 25
    R_CURL       shift, and go to state 124
    IF           shift, and go to state 8
    BEGIN_PHASE  shift, and go to state 9
    STOP         shift, and go to state 10
    CONSOLE_IN   shift, and go to state 11
    CONSOLE_OUT  shift, and go to state 12

    statement      go to state 125
    number         go to state 46
    array          go to state 14
    Expression     go to state 126
    option         go to state 48
    loop           go to state 127
    Function_Call  go to state 128
    if_statement   go to state 129


State 109

   10 codeseg: codeseg . statement END_STATEMENT
   11        | codeseg . loop
   12        | codeseg . if_statement
   13        | codeseg . Expression
   14        | codeseg . Function_Call END_STATEMENT
   71 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg . R_CURL

    INTEGER      shift, and go to state 4
    IDENTIFIER   shift, and go to state 122
    RETURN       shift, and go to state 123
    ZERO         shift, and go to state 23
    NEG_NUM      shift, and go to state 24
    POS_NUM      shift, and go to state 25
    R_CURL       shift, and go to state 130
    IF           shift, and go to state 8
    BEGIN_PHASE  shift, and go to state 9
    STOP         shift, and go to state 10
    CONSOLE_IN   shift, and go to state 11
    CONSOLE_OUT  shift, and go to state 12

    statement      go to state 125
    number         go to state 46
    array          go to state 14
    Expression     go to state 126
    option         go to state 48
    loop           go to state 127
    Function_Call  go to state 128
    if_statement   go to state 129


State 110

   24 statement: CONSOLE_IN IN_ARROW IDENTIFIER L_BRACK POS_NUM . R_BRACK

    R_BRACK  shift, and go to state 131


State 111

   22 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK ZERO . R_BRACK

    R_BRACK  shift, and go to state 132


State 112

   21 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK POS_NUM . R_BRACK

    R_BRACK  shift, and go to state 133


State 113

   37 array: IDENTIFIER L_BRACK IDENTIFIER R_BRACK EQUAL choice .

    $default  reduce using rule 37 (array)


State 114

   39 array: IDENTIFIER L_BRACK ZERO R_BRACK EQUAL choice .

    $default  reduce using rule 39 (array)


State 115

   36 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL choice .

    $default  reduce using rule 36 (array)


State 116

   34 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK IDENTIFIER R_BRACK .

    $default  reduce using rule 34 (array)


State 117

   38 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK ZERO R_BRACK .

    $default  reduce using rule 38 (array)


State 118

   35 array: IDENTIFIER EQUAL IDENTIFIER L_BRACK POS_NUM R_BRACK .

    $default  reduce using rule 35 (array)


State 119

   40 Function: FUNC IDENTIFIER L_PAREN Parameter R_PAREN L_CURL . codeseg R_CURL

    $default  reduce using rule 15 (codeseg)

    codeseg  go to state 134


State 120

   41 Parameter: Parameter COMMA INTEGER . IDENTIFIER

    IDENTIFIER  shift, and go to state 135


State 121

   44 Parameter: Parameter COMMA IDENTIFIER .

    $default  reduce using rule 44 (Parameter)


State 122

   18 statement: IDENTIFIER . EQUAL Expression
   25          | IDENTIFIER . EQUAL IDENTIFIER
   34 array: IDENTIFIER . EQUAL IDENTIFIER L_BRACK IDENTIFIER R_BRACK
   35      | IDENTIFIER . EQUAL IDENTIFIER L_BRACK POS_NUM R_BRACK
   36      | IDENTIFIER . L_BRACK POS_NUM R_BRACK EQUAL choice
   37      | IDENTIFIER . L_BRACK IDENTIFIER R_BRACK EQUAL choice
   38      | IDENTIFIER . EQUAL IDENTIFIER L_BRACK ZERO R_BRACK
   39      | IDENTIFIER . L_BRACK ZERO R_BRACK EQUAL choice
   58 Expression: IDENTIFIER .
   61 option: IDENTIFIER .
   72 Function_Call: IDENTIFIER . L_PAREN Parameter R_PAREN

    L_PAREN  shift, and go to state 50
    L_BRACK  shift, and go to state 19
    EQUAL    shift, and go to state 20

    MULT      reduce using rule 61 (option)
    DIV       reduce using rule 61 (option)
    PLUS      reduce using rule 61 (option)
    MINUS     reduce using rule 61 (option)
    MOD       reduce using rule 61 (option)
    $default  reduce using rule 58 (Expression)


State 123

   26 statement: RETURN . Expression

    IDENTIFIER  shift, and go to state 72
    ZERO        shift, and go to state 23
    NEG_NUM     shift, and go to state 24
    POS_NUM     shift, and go to state 25

    number         go to state 46
    Expression     go to state 27
    option         go to state 48
    Function_Call  go to state 29


State 124

   73 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL . else

    ELSE  shift, and go to state 136

    $default  reduce using rule 75 (else)

    else  go to state 137


State 125

   10 codeseg: codeseg statement . END_STATEMENT

    END_STATEMENT  shift, and go to state 138


State 126

   13 codeseg: codeseg Expression .

    $default  reduce using rule 13 (codeseg)


State 127

   11 codeseg: codeseg loop .

    $default  reduce using rule 11 (codeseg)


State 128

   14 codeseg: codeseg Function_Call . END_STATEMENT
   60 Expression: Function_Call .
   63 option: Function_Call .

    END_STATEMENT  shift, and go to state 139

    MULT      reduce using rule 63 (option)
    DIV       reduce using rule 63 (option)
    PLUS      reduce using rule 63 (option)
    MINUS     reduce using rule 63 (option)
    MOD       reduce using rule 63 (option)
    $default  reduce using rule 60 (Expression)


State 129

   12 codeseg: codeseg if_statement .

    $default  reduce using rule 12 (codeseg)


State 130

   71 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg R_CURL .

    $default  reduce using rule 71 (loop)


State 131

   24 statement: CONSOLE_IN IN_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK .

    $default  reduce using rule 24 (statement)


State 132

   22 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK ZERO R_BRACK .

    $default  reduce using rule 22 (statement)


State 133

   21 statement: CONSOLE_OUT OUT_ARROW IDENTIFIER L_BRACK POS_NUM R_BRACK .

    $default  reduce using rule 21 (statement)


State 134

   10 codeseg: codeseg . statement END_STATEMENT
   11        | codeseg . loop
   12        | codeseg . if_statement
   13        | codeseg . Expression
   14        | codeseg . Function_Call END_STATEMENT
   40 Function: FUNC IDENTIFIER L_PAREN Parameter R_PAREN L_CURL codeseg . R_CURL

    INTEGER      shift, and go to state 4
    IDENTIFIER   shift, and go to state 122
    RETURN       shift, and go to state 123
    ZERO         shift, and go to state 23
    NEG_NUM      shift, and go to state 24
    POS_NUM      shift, and go to state 25
    R_CURL       shift, and go to state 140
    IF           shift, and go to state 8
    BEGIN_PHASE  shift, and go to state 9
    STOP         shift, and go to state 10
    CONSOLE_IN   shift, and go to state 11
    CONSOLE_OUT  shift, and go to state 12

    statement      go to state 125
    number         go to state 46
    array          go to state 14
    Expression     go to state 126
    option         go to state 48
    loop           go to state 127
    Function_Call  go to state 128
    if_statement   go to state 129


State 135

   41 Parameter: Parameter COMMA INTEGER IDENTIFIER .

    $default  reduce using rule 41 (Parameter)


State 136

   74 else: ELSE . L_CURL codeseg R_CURL

    L_CURL  shift, and go to state 141


State 137

   73 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL else .

    $default  reduce using rule 73 (if_statement)


State 138

   10 codeseg: codeseg statement END_STATEMENT .

    $default  reduce using rule 10 (codeseg)


State 139

   14 codeseg: codeseg Function_Call END_STATEMENT .

    $default  reduce using rule 14 (codeseg)


State 140

   40 Function: FUNC IDENTIFIER L_PAREN Parameter R_PAREN L_CURL codeseg R_CURL .

    $default  reduce using rule 40 (Function)


State 141

   74 else: ELSE L_CURL . codeseg R_CURL

    $default  reduce using rule 15 (codeseg)

    codeseg  go to state 142


State 142

   10 codeseg: codeseg . statement END_STATEMENT
   11        | codeseg . loop
   12        | codeseg . if_statement
   13        | codeseg . Expression
   14        | codeseg . Function_Call END_STATEMENT
   74 else: ELSE L_CURL codeseg . R_CURL

    INTEGER      shift, and go to state 4
    IDENTIFIER   shift, and go to state 122
    RETURN       shift, and go to state 123
    ZERO         shift, and go to state 23
    NEG_NUM      shift, and go to state 24
    POS_NUM      shift, and go to state 25
    R_CURL       shift, and go to state 143
    IF           shift, and go to state 8
    BEGIN_PHASE  shift, and go to state 9
    STOP         shift, and go to state 10
    CONSOLE_IN   shift, and go to state 11
    CONSOLE_OUT  shift, and go to state 12

    statement      go to state 125
    number         go to state 46
    array          go to state 14
    Expression     go to state 126
    option         go to state 48
    loop           go to state 127
    Function_Call  go to state 128
    if_statement   go to state 129


State 143

   74 else: ELSE L_CURL codeseg R_CURL .

    $default  reduce using rule 74 (else)
