Nonterminals useless in grammar

    Function


Terminals unused in grammar

    COMMENT_SINGLE
    L_PAREN
    IN_ARROW
    CONSOLE_IN
    NEW_LINE


Rules useless in grammar

   71 Function: BEGIN_FUNCTION Parameter R_PAREN L_CURL codeseg R_CURL


Grammar

    0 $accept: fcodeseg $end

    1 fcodeseg: fcodeseg statement END_STATEMENT
    2         | fcodeseg loop
    3         | fcodeseg if_statement
    4         | fcodeseg Function_Call
    5         | ε

    6 codeseg: codeseg statement END_STATEMENT
    7        | codeseg loop
    8        | codeseg Expression
    9        | ε

   10 statement: INTEGER IDENTIFIER EQUAL number
   11          | array
   12          | INTEGER IDENTIFIER
   13          | IDENTIFIER EQUAL Expression
   14          | CONSOLE_OUT OUT_ARROW Expression
   15          | STOP

   16 number: POS_NUM
   17       | NEG_NUM
   18       | ZERO

   19 array: IDENTIFIER L_BRACK POS_NUM R_BRACK
   20      | IDENTIFIER
   21      | IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL L_CURL fill R_CURL

   22 fill: fill COMMA POS_NUM
   23     | fill COMMA NEG_NUM
   24     | fill COMMA ZERO
   25     | single_choice

   26 single_choice: POS_NUM
   27              | NEG_NUM
   28              | ZERO

   29 Parameter: INTEGER Parameter COMMA INTEGER IDENTIFIER
   30          | INTEGER IDENTIFIER
   31          | ε

   32 condition: choice condition_op choice
   33          | IDENTIFIER
   34          | number

   35 choice: IDENTIFIER
   36       | POS_NUM
   37       | NEG_NUM
   38       | ZERO

   39 condition_op: LESS
   40             | GREATER
   41             | EQ
   42             | NOT_EQ
   43             | PLUS
   44             | MINUS
   45             | MULT
   46             | DIV
   47             | GREATER_EQ
   48             | LESS_EQ

   49 Expression: option operation option
   50           | IDENTIFIER
   51           | number

   52 option: IDENTIFIER
   53       | POS_NUM
   54       | NEG_NUM
   55       | ZERO

   56 operation: PLUS
   57          | MINUS
   58          | MULT
   59          | DIV

   60 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg R_CURL
   61     | DO L_CURL codeseg R_CURL BEGIN_PHASE condition R_PAREN

   62 Function_Call: BEGIN_FUNCTION Parameter Parameter_Call R_PAREN END_STATEMENT

   63 Parameter_Call: Parameter_Call COMMA IDENTIFIER
   64               | IDENTIFIER
   65               | Parameter_Call COMMA number
   66               | number
   67               | ε

   68 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL else

   69 else: ELSE codeseg R_CURL
   70     | ε


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INTEGER (258) 10 12 29 30
    IDENTIFIER <id> (259) 10 12 13 19 20 21 29 30 33 35 50 52 63 64
    END_STATEMENT (260) 1 6 62
    COMMENT_SINGLE (261)
    ZERO <num> (262) 18 24 28 38 55
    NEG_NUM <num> (263) 17 23 27 37 54
    POS_NUM <num> (264) 16 19 21 22 26 36 53
    MULT (265) 45 58
    DIV (266) 46 59
    PLUS (267) 43 56
    MINUS (268) 44 57
    LESS (269) 39
    EQ (270) 41
    GREATER (271) 40
    NOT_EQ (272) 42
    LESS_EQ (273) 48
    GREATER_EQ (274) 47
    L_PAREN (275)
    R_PAREN (276) 60 61 62 68
    L_BRACK (277) 19 21
    R_BRACK (278) 19 21
    L_CURL (279) 21 60 61 68
    R_CURL (280) 21 60 61 68 69
    EQUAL (281) 10 13 21
    IF (282) 68
    ELSE (283) 69
    COMMA (284) 22 23 24 29 63 65
    BEGIN_PHASE (285) 60 61
    DO (286) 61
    BEGIN_FUNCTION (287) 62
    OUT_ARROW (288) 14
    IN_ARROW (289)
    STOP (290) 15
    CONSOLE_IN (291)
    CONSOLE_OUT (292) 14
    NEW_LINE (293)


Nonterminals, with rules where they appear

    $accept (39)
        on left: 0
    fcodeseg (40)
        on left: 1 2 3 4 5
        on right: 0 1 2 3 4
    codeseg (41)
        on left: 6 7 8 9
        on right: 6 7 8 60 61 68 69
    statement (42)
        on left: 10 11 12 13 14 15
        on right: 1 6
    number (43)
        on left: 16 17 18
        on right: 10 34 51 65 66
    array (44)
        on left: 19 20 21
        on right: 11
    fill (45)
        on left: 22 23 24 25
        on right: 21 22 23 24
    single_choice (46)
        on left: 26 27 28
        on right: 25
    Parameter (47)
        on left: 29 30 31
        on right: 29 62
    condition (48)
        on left: 32 33 34
        on right: 60 61 68
    choice (49)
        on left: 35 36 37 38
        on right: 32
    condition_op (50)
        on left: 39 40 41 42 43 44 45 46 47 48
        on right: 32
    Expression (51)
        on left: 49 50 51
        on right: 8 13 14
    option (52)
        on left: 52 53 54 55
        on right: 49
    operation (53)
        on left: 56 57 58 59
        on right: 49
    loop (54)
        on left: 60 61
        on right: 2 7
    Function_Call (55)
        on left: 62
        on right: 4
    Parameter_Call (56)
        on left: 63 64 65 66 67
        on right: 62 63 65
    if_statement (57)
        on left: 68
        on right: 3
    else (58)
        on left: 69 70
        on right: 68


State 0

    0 $accept: • fcodeseg $end

    $default  reduce using rule 5 (fcodeseg)

    fcodeseg  go to state 1


State 1

    0 $accept: fcodeseg • $end
    1 fcodeseg: fcodeseg • statement END_STATEMENT
    2         | fcodeseg • loop
    3         | fcodeseg • if_statement
    4         | fcodeseg • Function_Call

    $end            shift, and go to state 2
    INTEGER         shift, and go to state 3
    IDENTIFIER      shift, and go to state 4
    IF              shift, and go to state 5
    BEGIN_PHASE     shift, and go to state 6
    DO              shift, and go to state 7
    BEGIN_FUNCTION  shift, and go to state 8
    STOP            shift, and go to state 9
    CONSOLE_OUT     shift, and go to state 10

    statement      go to state 11
    array          go to state 12
    loop           go to state 13
    Function_Call  go to state 14
    if_statement   go to state 15


State 2

    0 $accept: fcodeseg $end •

    $default  accept


State 3

   10 statement: INTEGER • IDENTIFIER EQUAL number
   12          | INTEGER • IDENTIFIER

    IDENTIFIER  shift, and go to state 16


State 4

   13 statement: IDENTIFIER • EQUAL Expression
   19 array: IDENTIFIER • L_BRACK POS_NUM R_BRACK
   20      | IDENTIFIER •
   21      | IDENTIFIER • L_BRACK POS_NUM R_BRACK EQUAL L_CURL fill R_CURL

    L_BRACK  shift, and go to state 17
    EQUAL    shift, and go to state 18

    $default  reduce using rule 20 (array)


State 5

   68 if_statement: IF • condition R_PAREN L_CURL codeseg R_CURL else

    IDENTIFIER  shift, and go to state 19
    ZERO        shift, and go to state 20
    NEG_NUM     shift, and go to state 21
    POS_NUM     shift, and go to state 22

    number     go to state 23
    condition  go to state 24
    choice     go to state 25


State 6

   60 loop: BEGIN_PHASE • condition R_PAREN L_CURL codeseg R_CURL

    IDENTIFIER  shift, and go to state 19
    ZERO        shift, and go to state 20
    NEG_NUM     shift, and go to state 21
    POS_NUM     shift, and go to state 22

    number     go to state 23
    condition  go to state 26
    choice     go to state 25


State 7

   61 loop: DO • L_CURL codeseg R_CURL BEGIN_PHASE condition R_PAREN

    L_CURL  shift, and go to state 27


State 8

   62 Function_Call: BEGIN_FUNCTION • Parameter Parameter_Call R_PAREN END_STATEMENT

    INTEGER  shift, and go to state 28

    $default  reduce using rule 31 (Parameter)

    Parameter  go to state 29


State 9

   15 statement: STOP •

    $default  reduce using rule 15 (statement)


State 10

   14 statement: CONSOLE_OUT • OUT_ARROW Expression

    OUT_ARROW  shift, and go to state 30


State 11

    1 fcodeseg: fcodeseg statement • END_STATEMENT

    END_STATEMENT  shift, and go to state 31


State 12

   11 statement: array •

    $default  reduce using rule 11 (statement)


State 13

    2 fcodeseg: fcodeseg loop •

    $default  reduce using rule 2 (fcodeseg)


State 14

    4 fcodeseg: fcodeseg Function_Call •

    $default  reduce using rule 4 (fcodeseg)


State 15

    3 fcodeseg: fcodeseg if_statement •

    $default  reduce using rule 3 (fcodeseg)


State 16

   10 statement: INTEGER IDENTIFIER • EQUAL number
   12          | INTEGER IDENTIFIER •

    EQUAL  shift, and go to state 32

    $default  reduce using rule 12 (statement)


State 17

   19 array: IDENTIFIER L_BRACK • POS_NUM R_BRACK
   21      | IDENTIFIER L_BRACK • POS_NUM R_BRACK EQUAL L_CURL fill R_CURL

    POS_NUM  shift, and go to state 33


State 18

   13 statement: IDENTIFIER EQUAL • Expression

    IDENTIFIER  shift, and go to state 34
    ZERO        shift, and go to state 35
    NEG_NUM     shift, and go to state 36
    POS_NUM     shift, and go to state 37

    number      go to state 38
    Expression  go to state 39
    option      go to state 40


State 19

   33 condition: IDENTIFIER •
   35 choice: IDENTIFIER •

    R_PAREN   reduce using rule 33 (condition)
    $default  reduce using rule 35 (choice)


State 20

   18 number: ZERO •
   38 choice: ZERO •

    R_PAREN   reduce using rule 18 (number)
    $default  reduce using rule 38 (choice)


State 21

   17 number: NEG_NUM •
   37 choice: NEG_NUM •

    R_PAREN   reduce using rule 17 (number)
    $default  reduce using rule 37 (choice)


State 22

   16 number: POS_NUM •
   36 choice: POS_NUM •

    R_PAREN   reduce using rule 16 (number)
    $default  reduce using rule 36 (choice)


State 23

   34 condition: number •

    $default  reduce using rule 34 (condition)


State 24

   68 if_statement: IF condition • R_PAREN L_CURL codeseg R_CURL else

    R_PAREN  shift, and go to state 41


State 25

   32 condition: choice • condition_op choice

    MULT        shift, and go to state 42
    DIV         shift, and go to state 43
    PLUS        shift, and go to state 44
    MINUS       shift, and go to state 45
    LESS        shift, and go to state 46
    EQ          shift, and go to state 47
    GREATER     shift, and go to state 48
    NOT_EQ      shift, and go to state 49
    LESS_EQ     shift, and go to state 50
    GREATER_EQ  shift, and go to state 51

    condition_op  go to state 52


State 26

   60 loop: BEGIN_PHASE condition • R_PAREN L_CURL codeseg R_CURL

    R_PAREN  shift, and go to state 53


State 27

   61 loop: DO L_CURL • codeseg R_CURL BEGIN_PHASE condition R_PAREN

    $default  reduce using rule 9 (codeseg)

    codeseg  go to state 54


State 28

   29 Parameter: INTEGER • Parameter COMMA INTEGER IDENTIFIER
   30          | INTEGER • IDENTIFIER

    INTEGER     shift, and go to state 28
    IDENTIFIER  shift, and go to state 55

    $default  reduce using rule 31 (Parameter)

    Parameter  go to state 56


State 29

   62 Function_Call: BEGIN_FUNCTION Parameter • Parameter_Call R_PAREN END_STATEMENT

    IDENTIFIER  shift, and go to state 57
    ZERO        shift, and go to state 58
    NEG_NUM     shift, and go to state 59
    POS_NUM     shift, and go to state 60

    $default  reduce using rule 67 (Parameter_Call)

    number          go to state 61
    Parameter_Call  go to state 62


State 30

   14 statement: CONSOLE_OUT OUT_ARROW • Expression

    IDENTIFIER  shift, and go to state 34
    ZERO        shift, and go to state 35
    NEG_NUM     shift, and go to state 36
    POS_NUM     shift, and go to state 37

    number      go to state 38
    Expression  go to state 63
    option      go to state 40


State 31

    1 fcodeseg: fcodeseg statement END_STATEMENT •

    $default  reduce using rule 1 (fcodeseg)


State 32

   10 statement: INTEGER IDENTIFIER EQUAL • number

    ZERO     shift, and go to state 58
    NEG_NUM  shift, and go to state 59
    POS_NUM  shift, and go to state 60

    number  go to state 64


State 33

   19 array: IDENTIFIER L_BRACK POS_NUM • R_BRACK
   21      | IDENTIFIER L_BRACK POS_NUM • R_BRACK EQUAL L_CURL fill R_CURL

    R_BRACK  shift, and go to state 65


State 34

   50 Expression: IDENTIFIER •
   52 option: IDENTIFIER •

    END_STATEMENT  reduce using rule 50 (Expression)
    $default       reduce using rule 52 (option)


State 35

   18 number: ZERO •
   55 option: ZERO •

    MULT      reduce using rule 55 (option)
    DIV       reduce using rule 55 (option)
    PLUS      reduce using rule 55 (option)
    MINUS     reduce using rule 55 (option)
    $default  reduce using rule 18 (number)


State 36

   17 number: NEG_NUM •
   54 option: NEG_NUM •

    MULT      reduce using rule 54 (option)
    DIV       reduce using rule 54 (option)
    PLUS      reduce using rule 54 (option)
    MINUS     reduce using rule 54 (option)
    $default  reduce using rule 17 (number)


State 37

   16 number: POS_NUM •
   53 option: POS_NUM •

    MULT      reduce using rule 53 (option)
    DIV       reduce using rule 53 (option)
    PLUS      reduce using rule 53 (option)
    MINUS     reduce using rule 53 (option)
    $default  reduce using rule 16 (number)


State 38

   51 Expression: number •

    $default  reduce using rule 51 (Expression)


State 39

   13 statement: IDENTIFIER EQUAL Expression •

    $default  reduce using rule 13 (statement)


State 40

   49 Expression: option • operation option

    MULT   shift, and go to state 66
    DIV    shift, and go to state 67
    PLUS   shift, and go to state 68
    MINUS  shift, and go to state 69

    operation  go to state 70


State 41

   68 if_statement: IF condition R_PAREN • L_CURL codeseg R_CURL else

    L_CURL  shift, and go to state 71


State 42

   45 condition_op: MULT •

    $default  reduce using rule 45 (condition_op)


State 43

   46 condition_op: DIV •

    $default  reduce using rule 46 (condition_op)


State 44

   43 condition_op: PLUS •

    $default  reduce using rule 43 (condition_op)


State 45

   44 condition_op: MINUS •

    $default  reduce using rule 44 (condition_op)


State 46

   39 condition_op: LESS •

    $default  reduce using rule 39 (condition_op)


State 47

   41 condition_op: EQ •

    $default  reduce using rule 41 (condition_op)


State 48

   40 condition_op: GREATER •

    $default  reduce using rule 40 (condition_op)


State 49

   42 condition_op: NOT_EQ •

    $default  reduce using rule 42 (condition_op)


State 50

   48 condition_op: LESS_EQ •

    $default  reduce using rule 48 (condition_op)


State 51

   47 condition_op: GREATER_EQ •

    $default  reduce using rule 47 (condition_op)


State 52

   32 condition: choice condition_op • choice

    IDENTIFIER  shift, and go to state 72
    ZERO        shift, and go to state 73
    NEG_NUM     shift, and go to state 74
    POS_NUM     shift, and go to state 75

    choice  go to state 76


State 53

   60 loop: BEGIN_PHASE condition R_PAREN • L_CURL codeseg R_CURL

    L_CURL  shift, and go to state 77


State 54

    6 codeseg: codeseg • statement END_STATEMENT
    7        | codeseg • loop
    8        | codeseg • Expression
   61 loop: DO L_CURL codeseg • R_CURL BEGIN_PHASE condition R_PAREN

    INTEGER      shift, and go to state 3
    IDENTIFIER   shift, and go to state 78
    ZERO         shift, and go to state 35
    NEG_NUM      shift, and go to state 36
    POS_NUM      shift, and go to state 37
    R_CURL       shift, and go to state 79
    BEGIN_PHASE  shift, and go to state 6
    DO           shift, and go to state 7
    STOP         shift, and go to state 9
    CONSOLE_OUT  shift, and go to state 10

    statement   go to state 80
    number      go to state 38
    array       go to state 12
    Expression  go to state 81
    option      go to state 40
    loop        go to state 82


State 55

   30 Parameter: INTEGER IDENTIFIER •

    $default  reduce using rule 30 (Parameter)


State 56

   29 Parameter: INTEGER Parameter • COMMA INTEGER IDENTIFIER

    COMMA  shift, and go to state 83


State 57

   64 Parameter_Call: IDENTIFIER •

    $default  reduce using rule 64 (Parameter_Call)


State 58

   18 number: ZERO •

    $default  reduce using rule 18 (number)


State 59

   17 number: NEG_NUM •

    $default  reduce using rule 17 (number)


State 60

   16 number: POS_NUM •

    $default  reduce using rule 16 (number)


State 61

   66 Parameter_Call: number •

    $default  reduce using rule 66 (Parameter_Call)


State 62

   62 Function_Call: BEGIN_FUNCTION Parameter Parameter_Call • R_PAREN END_STATEMENT
   63 Parameter_Call: Parameter_Call • COMMA IDENTIFIER
   65               | Parameter_Call • COMMA number

    R_PAREN  shift, and go to state 84
    COMMA    shift, and go to state 85


State 63

   14 statement: CONSOLE_OUT OUT_ARROW Expression •

    $default  reduce using rule 14 (statement)


State 64

   10 statement: INTEGER IDENTIFIER EQUAL number •

    $default  reduce using rule 10 (statement)


State 65

   19 array: IDENTIFIER L_BRACK POS_NUM R_BRACK •
   21      | IDENTIFIER L_BRACK POS_NUM R_BRACK • EQUAL L_CURL fill R_CURL

    EQUAL  shift, and go to state 86

    $default  reduce using rule 19 (array)


State 66

   58 operation: MULT •

    $default  reduce using rule 58 (operation)


State 67

   59 operation: DIV •

    $default  reduce using rule 59 (operation)


State 68

   56 operation: PLUS •

    $default  reduce using rule 56 (operation)


State 69

   57 operation: MINUS •

    $default  reduce using rule 57 (operation)


State 70

   49 Expression: option operation • option

    IDENTIFIER  shift, and go to state 87
    ZERO        shift, and go to state 88
    NEG_NUM     shift, and go to state 89
    POS_NUM     shift, and go to state 90

    option  go to state 91


State 71

   68 if_statement: IF condition R_PAREN L_CURL • codeseg R_CURL else

    $default  reduce using rule 9 (codeseg)

    codeseg  go to state 92


State 72

   35 choice: IDENTIFIER •

    $default  reduce using rule 35 (choice)


State 73

   38 choice: ZERO •

    $default  reduce using rule 38 (choice)


State 74

   37 choice: NEG_NUM •

    $default  reduce using rule 37 (choice)


State 75

   36 choice: POS_NUM •

    $default  reduce using rule 36 (choice)


State 76

   32 condition: choice condition_op choice •

    $default  reduce using rule 32 (condition)


State 77

   60 loop: BEGIN_PHASE condition R_PAREN L_CURL • codeseg R_CURL

    $default  reduce using rule 9 (codeseg)

    codeseg  go to state 93


State 78

   13 statement: IDENTIFIER • EQUAL Expression
   19 array: IDENTIFIER • L_BRACK POS_NUM R_BRACK
   20      | IDENTIFIER •
   21      | IDENTIFIER • L_BRACK POS_NUM R_BRACK EQUAL L_CURL fill R_CURL
   50 Expression: IDENTIFIER •
   52 option: IDENTIFIER •

    L_BRACK  shift, and go to state 17
    EQUAL    shift, and go to state 18

    END_STATEMENT  reduce using rule 20 (array)
    MULT           reduce using rule 52 (option)
    DIV            reduce using rule 52 (option)
    PLUS           reduce using rule 52 (option)
    MINUS          reduce using rule 52 (option)
    $default       reduce using rule 50 (Expression)


State 79

   61 loop: DO L_CURL codeseg R_CURL • BEGIN_PHASE condition R_PAREN

    BEGIN_PHASE  shift, and go to state 94


State 80

    6 codeseg: codeseg statement • END_STATEMENT

    END_STATEMENT  shift, and go to state 95


State 81

    8 codeseg: codeseg Expression •

    $default  reduce using rule 8 (codeseg)


State 82

    7 codeseg: codeseg loop •

    $default  reduce using rule 7 (codeseg)


State 83

   29 Parameter: INTEGER Parameter COMMA • INTEGER IDENTIFIER

    INTEGER  shift, and go to state 96


State 84

   62 Function_Call: BEGIN_FUNCTION Parameter Parameter_Call R_PAREN • END_STATEMENT

    END_STATEMENT  shift, and go to state 97


State 85

   63 Parameter_Call: Parameter_Call COMMA • IDENTIFIER
   65               | Parameter_Call COMMA • number

    IDENTIFIER  shift, and go to state 98
    ZERO        shift, and go to state 58
    NEG_NUM     shift, and go to state 59
    POS_NUM     shift, and go to state 60

    number  go to state 99


State 86

   21 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL • L_CURL fill R_CURL

    L_CURL  shift, and go to state 100


State 87

   52 option: IDENTIFIER •

    $default  reduce using rule 52 (option)


State 88

   55 option: ZERO •

    $default  reduce using rule 55 (option)


State 89

   54 option: NEG_NUM •

    $default  reduce using rule 54 (option)


State 90

   53 option: POS_NUM •

    $default  reduce using rule 53 (option)


State 91

   49 Expression: option operation option •

    $default  reduce using rule 49 (Expression)


State 92

    6 codeseg: codeseg • statement END_STATEMENT
    7        | codeseg • loop
    8        | codeseg • Expression
   68 if_statement: IF condition R_PAREN L_CURL codeseg • R_CURL else

    INTEGER      shift, and go to state 3
    IDENTIFIER   shift, and go to state 78
    ZERO         shift, and go to state 35
    NEG_NUM      shift, and go to state 36
    POS_NUM      shift, and go to state 37
    R_CURL       shift, and go to state 101
    BEGIN_PHASE  shift, and go to state 6
    DO           shift, and go to state 7
    STOP         shift, and go to state 9
    CONSOLE_OUT  shift, and go to state 10

    statement   go to state 80
    number      go to state 38
    array       go to state 12
    Expression  go to state 81
    option      go to state 40
    loop        go to state 82


State 93

    6 codeseg: codeseg • statement END_STATEMENT
    7        | codeseg • loop
    8        | codeseg • Expression
   60 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg • R_CURL

    INTEGER      shift, and go to state 3
    IDENTIFIER   shift, and go to state 78
    ZERO         shift, and go to state 35
    NEG_NUM      shift, and go to state 36
    POS_NUM      shift, and go to state 37
    R_CURL       shift, and go to state 102
    BEGIN_PHASE  shift, and go to state 6
    DO           shift, and go to state 7
    STOP         shift, and go to state 9
    CONSOLE_OUT  shift, and go to state 10

    statement   go to state 80
    number      go to state 38
    array       go to state 12
    Expression  go to state 81
    option      go to state 40
    loop        go to state 82


State 94

   61 loop: DO L_CURL codeseg R_CURL BEGIN_PHASE • condition R_PAREN

    IDENTIFIER  shift, and go to state 19
    ZERO        shift, and go to state 20
    NEG_NUM     shift, and go to state 21
    POS_NUM     shift, and go to state 22

    number     go to state 23
    condition  go to state 103
    choice     go to state 25


State 95

    6 codeseg: codeseg statement END_STATEMENT •

    $default  reduce using rule 6 (codeseg)


State 96

   29 Parameter: INTEGER Parameter COMMA INTEGER • IDENTIFIER

    IDENTIFIER  shift, and go to state 104


State 97

   62 Function_Call: BEGIN_FUNCTION Parameter Parameter_Call R_PAREN END_STATEMENT •

    $default  reduce using rule 62 (Function_Call)


State 98

   63 Parameter_Call: Parameter_Call COMMA IDENTIFIER •

    $default  reduce using rule 63 (Parameter_Call)


State 99

   65 Parameter_Call: Parameter_Call COMMA number •

    $default  reduce using rule 65 (Parameter_Call)


State 100

   21 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL L_CURL • fill R_CURL

    ZERO     shift, and go to state 105
    NEG_NUM  shift, and go to state 106
    POS_NUM  shift, and go to state 107

    fill           go to state 108
    single_choice  go to state 109


State 101

   68 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL • else

    ELSE  shift, and go to state 110

    $default  reduce using rule 70 (else)

    else  go to state 111


State 102

   60 loop: BEGIN_PHASE condition R_PAREN L_CURL codeseg R_CURL •

    $default  reduce using rule 60 (loop)


State 103

   61 loop: DO L_CURL codeseg R_CURL BEGIN_PHASE condition • R_PAREN

    R_PAREN  shift, and go to state 112


State 104

   29 Parameter: INTEGER Parameter COMMA INTEGER IDENTIFIER •

    $default  reduce using rule 29 (Parameter)


State 105

   28 single_choice: ZERO •

    $default  reduce using rule 28 (single_choice)


State 106

   27 single_choice: NEG_NUM •

    $default  reduce using rule 27 (single_choice)


State 107

   26 single_choice: POS_NUM •

    $default  reduce using rule 26 (single_choice)


State 108

   21 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL L_CURL fill • R_CURL
   22 fill: fill • COMMA POS_NUM
   23     | fill • COMMA NEG_NUM
   24     | fill • COMMA ZERO

    R_CURL  shift, and go to state 113
    COMMA   shift, and go to state 114


State 109

   25 fill: single_choice •

    $default  reduce using rule 25 (fill)


State 110

   69 else: ELSE • codeseg R_CURL

    $default  reduce using rule 9 (codeseg)

    codeseg  go to state 115


State 111

   68 if_statement: IF condition R_PAREN L_CURL codeseg R_CURL else •

    $default  reduce using rule 68 (if_statement)


State 112

   61 loop: DO L_CURL codeseg R_CURL BEGIN_PHASE condition R_PAREN •

    $default  reduce using rule 61 (loop)


State 113

   21 array: IDENTIFIER L_BRACK POS_NUM R_BRACK EQUAL L_CURL fill R_CURL •

    $default  reduce using rule 21 (array)


State 114

   22 fill: fill COMMA • POS_NUM
   23     | fill COMMA • NEG_NUM
   24     | fill COMMA • ZERO

    ZERO     shift, and go to state 116
    NEG_NUM  shift, and go to state 117
    POS_NUM  shift, and go to state 118


State 115

    6 codeseg: codeseg • statement END_STATEMENT
    7        | codeseg • loop
    8        | codeseg • Expression
   69 else: ELSE codeseg • R_CURL

    INTEGER      shift, and go to state 3
    IDENTIFIER   shift, and go to state 78
    ZERO         shift, and go to state 35
    NEG_NUM      shift, and go to state 36
    POS_NUM      shift, and go to state 37
    R_CURL       shift, and go to state 119
    BEGIN_PHASE  shift, and go to state 6
    DO           shift, and go to state 7
    STOP         shift, and go to state 9
    CONSOLE_OUT  shift, and go to state 10

    statement   go to state 80
    number      go to state 38
    array       go to state 12
    Expression  go to state 81
    option      go to state 40
    loop        go to state 82


State 116

   24 fill: fill COMMA ZERO •

    $default  reduce using rule 24 (fill)


State 117

   23 fill: fill COMMA NEG_NUM •

    $default  reduce using rule 23 (fill)


State 118

   22 fill: fill COMMA POS_NUM •

    $default  reduce using rule 22 (fill)


State 119

   69 else: ELSE codeseg R_CURL •

    $default  reduce using rule 69 (else)
